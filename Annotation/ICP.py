import open3d as o3dimport numpy as npdef icp_registration(source_path, target_path, max_iterations=100, tolerance=1e-6):    """    Perform ICP registration using Open3D.    Parameters:    - source_path: Path to the source PCD file    - target_path: Path to the target PCD file    - max_iterations: Maximum number of iterations for the ICP algorithm    - tolerance: Tolerance for convergence    Returns:    - transformed_source: Transformed source point cloud    - transformation_matrix: Transformation matrix    """    # Read PCD files    source_cloud = o3d.io.read_point_cloud(source_path)    target_cloud = o3d.io.read_point_cloud(target_path)    # Set the ICP convergence criteria    criteria = o3d.registration.ICPConvergenceCriteria(max_iteration=max_iterations,                                                       relative_fitness=tolerance,                                                       relative_rmse=tolerance)    # Perform ICP registration    reg_result = o3d.registration.registration_icp(source_cloud, target_cloud, tolerance, np.identity(4),                                                    o3d.registration.TransformationEstimationPointToPoint(),                                                    criteria)    # Apply the transformation to the source point cloud    transformed_source = source_cloud.transform(reg_result.transformation)    return reg_result.transformation# Example usage:# source_pcd_path = "path/to/source.pcd"# target_pcd_path = "path/to/target.pcd"## transformed_source, transformation_matrix = icp_registration(source_pcd_path, target_pcd_path)## # Apply the transformation matrix to a specific point (e.g., [x, y, z])# point_to_transform = np.array([x, y, z])# transformed_point = np.dot(transformation_matrix[:3, :3], point_to_transform) + transformation_matrix[:3, 3]## print("Original Point:", point_to_transform)# print("Transformed Point:", transformed_point)